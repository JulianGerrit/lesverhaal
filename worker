#!/usr/bin/python3

'''Worker for running Python code in lesverhaal.

This program receives commands on stdin, runs them and outputs results on
stdout. It is intended to be run in a firejail chroot so untrusted code can run
in it.

This program is intended to be used by lesverhaal.
'''

import json
import sys

pending = None

def add_to_pending(item):
	if pending is None:
		raise ValueError('ui calls can only be made from code blocks')
	pending.append(item)

variables = {
	'answer': lambda key, value = None: add_to_pending(['answer', key, value]),
}

for line in sys.stdin:
	#sys.stderr.write('received %s\n' % repr(line))
	cmd, rest = line.split('\t', 1)
	if cmd == 'set':
		k, v = rest.split('\t', 1)
		key = k.strip()
		value = json.loads(v.strip())
		variables[key] = value
	elif cmd in ('run', 'init'):
		script = json.loads(rest.strip())
		if cmd == 'run':
			pending = []
		try:
			exec(script, variables)
			if cmd != 'run':
				pending = []
			out = json.dumps([None, pending])
		except:
			out = json.dumps([str(sys.exc_info()[1]), []])
		pending = None
		sys.stdout.write(out + '\n')
		sys.stdout.flush()
	elif cmd == 'str':
		expr = json.loads(rest.strip())
		try:
			ret = json.dumps([None, str(eval(expr, variables))])
		except:
			ret = json.dumps([str(sys.exc_info()[1]), ''])
		sys.stdout.write(ret + '\n')
		sys.stdout.flush()
	elif cmd == 'bool':
		expr = json.loads(rest.strip())
		try:
			ret = json.dumps([None, bool(eval(expr, variables))])
		except:
			ret = json.dumps([str(sys.exc_info()[1]), False])
		sys.stdout.write(ret + '\n')
		sys.stdout.flush()
	else:
		sys.stderr.write('Invalid command received: %s\n' % repr(line))
	#sys.stderr.write('handling done\n')

#sys.stderr.write('Worker received EOF on stdin; closing.\n')
